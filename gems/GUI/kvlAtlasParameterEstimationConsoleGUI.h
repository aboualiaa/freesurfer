// generated by Fast Light User Interface Designer (fluid) version 1.0305

#ifndef kvlAtlasParameterEstimationConsoleGUI_h
#define kvlAtlasParameterEstimationConsoleGUI_h
#include "kvlImageViewer.h"
#include <FL/Fl.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Progress.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Value_Output.H>

class kvlAtlasParameterEstimationConsoleGUI {
public:
  kvlAtlasParameterEstimationConsoleGUI();
  Fl_Double_Window *m_Window;

private:
  inline void cb_m_Window_i(Fl_Double_Window *, void *);
  static void cb_m_Window(Fl_Double_Window *, void *);

public:
  kvl::ImageViewer *m_LabelImageViewer;

private:
  inline void cb_m_LabelImageViewer_i(kvl::ImageViewer *, void *);
  static void cb_m_LabelImageViewer(kvl::ImageViewer *, void *);

public:
  kvl::ImageViewer *m_AlphaImageViewer;

private:
  inline void cb_m_AlphaImageViewer_i(kvl::ImageViewer *, void *);
  static void cb_m_AlphaImageViewer(kvl::ImageViewer *, void *);

public:
  Fl_Choice *m_LabelImageNumber;

private:
  inline void cb_m_LabelImageNumber_i(Fl_Choice *, void *);
  static void cb_m_LabelImageNumber(Fl_Choice *, void *);

public:
  Fl_Value_Input *m_Size0;

private:
  inline void cb_m_Size0_i(Fl_Value_Input *, void *);
  static void cb_m_Size0(Fl_Value_Input *, void *);

public:
  Fl_Value_Input *m_Size1;

private:
  inline void cb_m_Size1_i(Fl_Value_Input *, void *);
  static void cb_m_Size1(Fl_Value_Input *, void *);
  inline void cb_Go_i(Fl_Button *, void *);
  static void cb_Go(Fl_Button *, void *);

public:
  Fl_Check_Button *m_ShowMesh;

private:
  inline void cb_m_ShowMesh_i(Fl_Check_Button *, void *);
  static void cb_m_ShowMesh(Fl_Check_Button *, void *);

public:
  Fl_Check_Button *m_ShowAlphasEstimationIterations;
  Fl_Progress *m_TotalProgress;
  Fl_Progress *m_SubProgress;
  Fl_Choice *m_LabelNumber;

private:
  inline void cb_m_LabelNumber_i(Fl_Choice *, void *);
  static void cb_m_LabelNumber(Fl_Choice *, void *);

public:
  Fl_Value_Input *m_InitialStiffness;

private:
  inline void cb_m_InitialStiffness_i(Fl_Value_Input *, void *);
  static void cb_m_InitialStiffness(Fl_Value_Input *, void *);

public:
  Fl_Check_Button *m_ShowGradient;

private:
  inline void cb_m_ShowGradient_i(Fl_Check_Button *, void *);
  static void cb_m_ShowGradient(Fl_Check_Button *, void *);
  inline void cb_Interrupt_i(Fl_Button *, void *);
  static void cb_Interrupt(Fl_Button *, void *);
  inline void cb_Step_i(Fl_Button *, void *);
  static void cb_Step(Fl_Button *, void *);
  inline void cb_Continue_i(Fl_Button *, void *);
  static void cb_Continue(Fl_Button *, void *);

public:
  Fl_Value_Input *m_PositionEstimationResolution;

private:
  inline void cb_m_PositionEstimationResolution_i(Fl_Value_Input *, void *);
  static void cb_m_PositionEstimationResolution(Fl_Value_Input *, void *);

public:
  Fl_Value_Input *m_NumberOfUpsamplingSteps;

private:
  inline void cb_m_NumberOfUpsamplingSteps_i(Fl_Value_Input *, void *);
  static void cb_m_NumberOfUpsamplingSteps(Fl_Value_Input *, void *);

public:
  Fl_Value_Output *m_FinalSize0;
  Fl_Value_Output *m_FinalSize1;
  Fl_Input *m_ExplicitStartCollection;

private:
  inline void cb_m_ExplicitStartCollection_i(Fl_Input *, void *);
  static void cb_m_ExplicitStartCollection(Fl_Input *, void *);

public:
  Fl_Check_Button *m_UseExplicitStartCollection;

private:
  inline void cb_m_UseExplicitStartCollection_i(Fl_Check_Button *, void *);
  static void cb_m_UseExplicitStartCollection(Fl_Check_Button *, void *);

public:
  Fl_Value_Input *m_Size2;

private:
  inline void cb_m_Size2_i(Fl_Value_Input *, void *);
  static void cb_m_Size2(Fl_Value_Input *, void *);

public:
  Fl_Value_Output *m_FinalSize2;
  Fl_Round_Button *m_FixedStepGradientDescent;
  Fl_Round_Button *m_GradientDescent;
  Fl_Round_Button *m_ConjugateGradient;
  Fl_Round_Button *m_LBFGS;
  ~kvlAtlasParameterEstimationConsoleGUI() = default;;
  virtual void DisplayLabelImage(unsigned int labelImageNumber) = 0;
  virtual void InitializeMesh() = 0;
  virtual void Estimate() = 0;
  virtual void SelectTriangleContainingPoint(float, float) = 0;
  virtual void Interrupt() = 0;
  virtual void Step() = 0;
  virtual void Continue() = 0;
  virtual void SetPositionEstimationResolution(unsigned int) = 0;
};
#endif
